package cloud.artik.example.kinesis_streams_consumer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.stream.Collectors;

import org.json.JSONObject;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.kinesis.*;
import com.amazonaws.services.kinesis.model.*;
import com.amazonaws.regions.*;

/**
 * Kinesis stream consumer App that shows received ARTIK Cloud messages
 * java -jar target/read-stream-1.0.0.jar -k AKIAJHLMPDJX7ZYICRWQ -s nwwuD4t6jeNcmZEo5KM+22ccMRJRC87kgFH1h5Cx -n akcstream -r us-west-1
 */
public class App 
{
    @SuppressWarnings("deprecation")
	public static void main( String[] args )
    {
    	// TODO should obtain these from input argument
    	// Configuration for Kinesis stream
    	String amazonAccessKey = "AKIAJHLMPDJX7ZYICRWQ";
    	String amazonSecretKey = "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";
    	String amazonStreamName = "akcstream";
    	String amazonRegionName = "us-west-1";
    	
        BasicAWSCredentials awsCredentials = new BasicAWSCredentials(amazonAccessKey, amazonSecretKey);
		AmazonKinesisClient client = new AmazonKinesisClient(awsCredentials);
		client.setRegion(RegionUtils.getRegion(amazonRegionName));
         
		long recordNum = 0;
		final int INTERVAL = 2000;

        // Getting initial stream description from aws
		System.out.println(client.describeStream(amazonStreamName).toString());
        List<Shard> initialShardData = client.describeStream(amazonStreamName).getStreamDescription().getShards();
        System.out.println("\nlist of shards:");
        initialShardData.forEach(d->System.out.println(d.toString()));
         
        // Getting shardIterators (at beginning sequence number) for reach shard
        List<String> initialShardIterators = initialShardData.stream().map(s -> 
             client.getShardIterator(new GetShardIteratorRequest()
                .withStreamName(amazonStreamName)
                .withShardId(s.getShardId())
                .withStartingSequenceNumber(s.getSequenceNumberRange().getStartingSequenceNumber())
                .withShardIteratorType(ShardIteratorType.AT_SEQUENCE_NUMBER)
                ).getShardIterator()
        ).collect(Collectors.toList());

        System.out.println("\nlist of ShardIterators:");
        initialShardIterators.forEach(i -> System.out.println(i));
        System.out.println("\nwaiting for messages....");
        //
        // messages are arriving here
        //
//        try {
//			Thread.sleep(5000);
//		} catch (InterruptedException e1) {
//			// TODO Auto-generated catch block
//			System.out.println("Run into exception");
//			e1.printStackTrace();
//		}
  
        String shardIterator = initialShardIterators.get(0);
        
        // Continuously read data records from a shard
        while (true) {
           
            // Create a new getRecordsRequest with an existing shardIterator 
            // Set the maximum records to return to 25
            GetRecordsRequest getRecordsRequest = new GetRecordsRequest();
            getRecordsRequest.setShardIterator(shardIterator);
            getRecordsRequest.setLimit(25); 

            GetRecordsResult recordResult = client.getRecords(getRecordsRequest);
           
	        recordResult.getRecords().forEach(record -> {
	      	try {
	      		String rec = new String(record.getData().array(), "UTF-8");
	              JSONObject fromKinesis = new JSONObject(rec);
	              System.out.println("\nKinesis record: " + record.toString());
	              System.out.println("ARTIK Cloud message: " + fromKinesis.toString());
	          } catch (UnsupportedEncodingException e) {
     	          System.out.println("Could not decode message from Kinesis stream result");
	              e.printStackTrace();
	          }
	        });

	        recordNum += recordResult.getRecords().size();
	        System.out.println("\nReceived " + recordNum +" records. sleep for " + INTERVAL/1000 +"s ...");
            try {
                Thread.sleep(INTERVAL);
            } catch (InterruptedException exception) {
        	    System.out.println("Receving InterruptedException. Exiting ...");
        	    return;
            }

            shardIterator = recordResult.getNextShardIterator();
        }
        
//        //Start reading data from initial sequence number
//        Set<JSONObject> messagesData = initialShardIterators.stream().flatMap(shardIterator -> {
//            GetRecordsResult recordResult;
//            Set<JSONObject> totalResult = new HashSet<>();
//            do { //loop over shard iterator in order to read the stream until end.
//                System.out.println("Get records from shard Iterator " + shardIterator);
//                recordResult = client.getRecords(new GetRecordsRequest().withShardIterator(shardIterator));
//                System.out.println("YWU result from this shard:" + recordResult.toString());
//                System.out.println("result from this shard getMillisBehindLatest:" + recordResult.getMillisBehindLatest());
//                System.out.println("result from this shard NextShardIterator:" + recordResult.getNextShardIterator());
//                System.out.println("result from this shard number of record:" + recordResult.getRecords().size());
//                recordResult.getRecords().forEach(record -> {
//                	try {
//                		String rec = new String(record.getData().array(), "UTF-8");
//                        JSONObject fromKinesis = new JSONObject(rec);
//                        System.out.println("\nrecord: " + record.toString());
//                        System.out.println("Getting message aws " + fromKinesis.toString());
//                        //YWU System.out.println("Getting message aws" + fromKinesis.getString("mid"));
//                        totalResult.add(fromKinesis);
//                    } catch (UnsupportedEncodingException e) {
//                    	System.out.println("Could not decode message from Kinesis stream result");
//                        e.printStackTrace();
//                    }
//                 });
//                 shardIterator = recordResult.getNextShardIterator();
//            }  //end of Do loop
//            while (recordResult.getMillisBehindLatest() > 0);
//            System.out.println("YWU total number of result from all shards:" + totalResult.size());
//            return totalResult.stream();
//            } //end of shardIterator
//        ).collect(Collectors.toSet());
        
    }//end of Main
}
